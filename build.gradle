
apply plugin: 'java'

sourceCompatibility = 1.7
version = '1.0.0'

configurations {
	forInstaller
	provided
	compile.extendsFrom provided
}

compileJava {
	options.compilerArgs << "-Xlint:unchecked"
}

repositories {
	mavenCentral()
	maven {
		//TODO replace to master
		url "https://raw.github.com/kaltura/KalturaGeneratedAPIClientsJava/PLAT-2504/maven"
	}
}

dependencies {
	provided 'org.activiti:activiti-engine:5.16.1'
	//provided 'com.fasterxml.uuid:java-uuid-generator:3.1.3'
	provided 'log4j:log4j:1.2.17'
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.3'
}

task validateTomcatDirExists {
    def fileExists = true
    //search for tomcat folder that is defined in gradle.properties
    def folder = new File("${CATALINA_BASE}")
    if( !folder.exists() ) {
        //if not exists, search for tomcat folder defined by env variable
        CATALINA_BASE = System.env.CATALINA_BASE
        folder = new File("${CATALINA_BASE}")
        if( !folder.exists() ) {
            fileExists = false
        }
    }

    doFirst {
        if (!fileExists) {
            throw new InvalidUserDataException("Tomact dir: '${CATALINA_BASE}' does not exist. Edit gradle.properties")
        }
        println "Build will be using tomcat jars from: $CATALINA_BASE"
    }
}

dependencies {
    provided files(
            "$CATALINA_BASE/lib/annotations-api.jar",
            "$CATALINA_BASE/lib/el-api.jar",
            "$CATALINA_BASE/lib/jasper.jar",
            "$CATALINA_BASE/lib/jasper-el.jar",
            "$CATALINA_BASE/lib/jsp-api.jar",
            "$CATALINA_BASE/lib/servlet-api.jar",
            "$CATALINA_BASE/lib/websocket-api.jar",
    )
    provided fileTree(dir: "$CATALINA_BASE/lib", includes: ['catalina*.jar', 'tomcat*.jar', 'commons-*.jar'])
    forInstaller "mysql:mysql-connector-java:5.1.34"
}

/**
 * copy all the needed activiti-server jars to tomcat lib dir
 */
task copyJarsToLibDir(type: Copy) {
	
    def dest1 = "$CATALINA_BASE/lib"
    def dest2 = "$buildDir/tmp/artifacts"
    println "Kaltura activiti-server artifacts will be copied to:"
    println " - " + dest1
    println " - " + dest2

    into dest1
    into dest2
    from configurations.runtime.allArtifacts.files
    from (configurations.runtime - configurations.provided)

    doFirst {
        println "Copying activiti-server jars to:"
        println " - " + dest1
        println " - " + dest2
    }
}
build.dependsOn(validateTomcatDirExists, copyJarsToLibDir)

/**
 * create a release - zip all needed jars.
 * the jars should be copied to to activiti_installation_dir/lib
 */
task prepareRelease(type: Zip, dependsOn: build ) {
    archiveName = "$project.name-install-$project.version" + ".zip"
    from "$projectDir/release"
    from (configurations.runtime.allArtifacts.files) {
        into ("lib")
    }
    from(configurations.runtime - configurations.provided) {
        into ("lib")
    }
    from(configurations.forInstaller) {
        into ("lib")
    }

    doLast {
        println "Release path: $prepareRelease.archivePath"
    }
}

task release(type:Exec, dependsOn: prepareRelease) {

    //check if client library already exists
    def user = System.getProperty("username")
    def pass = System.getProperty("password")

    //run the php release script
    workingDir projectDir
    commandLine "php", "$projectDir/../release.php", user , pass, version

    doFirst {
        //validate username and password are set:
        if (user == null || pass == null) {
            throw new InvalidUserDataException("username or password arguments are null. use: 'gradle uploadRelease -Dusername=myuser -Dpassword=mypass'")
        }

        def clientLibs = new File("${buildDir}/tmp/github-php-client")

        // If it doesn't exist, download it from Github
        if (!clientLibs.exists()) {
            println "Downloading PHP github client library..."
            ant.get(src: "https://github.com/tan-tan-kanarek/github-php-client/archive/master.zip", dest: "${buildDir}/tmp/github-php-client.zip")
            ant.unzip(src: "${buildDir}/tmp/github-php-client.zip", dest: "${buildDir}/tmp")
            ant.delete(file: "${buildDir}/tmp/github-php-client.zip")
            ant.move(file: "${buildDir}/tmp/github-php-client-master/client", tofile: "${buildDir}/tmp/github-php-client")
            ant.delete(dir: "${buildDir}/tmp/github-php-client-master")
        } else {
            println "PHP Client exists. skip download."
        }
    }
}

